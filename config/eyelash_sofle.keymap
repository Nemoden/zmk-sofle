#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>
#include "eyelash_sofle_keypos.h"

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

#define ___ &trans
#define XXX &none

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    behaviors {
        hl: timeless_left_home_row {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <220>;
            quick-tap-ms = <180>;
            require-prior-idle-ms = <140>;
            hold-trigger-on-release;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
        };

        hr: timeless_right_home_row {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <220>;
            quick-tap-ms = <180>;
            require-prior-idle-ms = <140>;
            hold-trigger-on-release;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
        };

        tp: tap_preferred {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <160>;
            quick-tap-ms = <125>;
            //require-prior-idle-ms = <130>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <130>;
            //require-prior-idle-ms = <130>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
        lt: layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <160>;
            quick-tap-ms = <125>;
            //require-prior-idle-ms = <130>;
            bindings = <&mo>, <&kp>;
            display-name = "Layer-Tap";
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_left_bracket {
            timeout-ms = <55>;
            key-positions = <29 30>; // df
            layers = <0>;
            bindings = <&kp LBKT>;
        };
        combo_right_bracket {
            timeout-ms = <55>;
            key-positions = <34 35>; // jk
            layers = <0>;
            bindings = <&kp RBKT>;
        };
        combo_left_par {
            timeout-ms = <55>;
            key-positions = <28 29>; // sd
            layers = <0>;
            bindings = <&kp LPAR>;
        };
        combo_right_par {
            timeout-ms = <55>;
            key-positions = <35 36>; // hj
            layers = <0>;
            bindings = <&kp RPAR>;
        };
        combo_under {
            timeout-ms = <55>;
            key-positions = <41 42>; // xc
            layers = <0>;
            bindings = <&kp UNDER>;
        };
        combo_equal {
            timeout-ms = <55>;
            key-positions = <48 49>; // ,.
            layers = <0>;
            bindings = <&kp EQUAL>;
        };
        combo_minus {
            timeout-ms = <55>;
            key-positions = <15 16>; // we
            layers = <0>;
            bindings = <&kp MINUS>;
        };
        combo_plus {
            timeout-ms = <55>;
            key-positions = <16 17>; // er
            layers = <0>;
            bindings = <&kp PLUS>;
        };
        combo_backslash {
            timeout-ms = <55>;
            key-positions = <22 23>; // io
            layers = <0>;
            bindings = <&kp BACKSLASH>;
        };
    };

    macros {
        macro_tmux_prefix: macro_tmux_prefix {
            compatible = "zmk,behavior-macro";
            label = "Tmux Prefix";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <30>;
            bindings = <&macro_tap &kp LC(A)>;
        };
        macro_tmux_next_window: macro_tmux_next_window {
          compatible = "zmk,behavior-macro";
          label = "Next Tmux Window";
          #binding-cells = <0>;
            wait-ms = <10>;
          bindings
            = <&macro_tap &kp LC(A)>
            , <&kp N>
            ;
        };
        macro_tmux_prev_window: macro_tmux_prev_window {
            compatible = "zmk,behavior-macro";
            label = "Previous Tmux Window";
            #binding-cells = <0>;
            wait-ms = <10>;
            bindings
              = <&macro_tap &kp LC(A)>
              , <&kp P>
              ;
        };
        macro_tmux_cmd: macro_tmux_cmd {
            compatible = "zmk,behavior-macro";
            label = "Tmux Command";
            #binding-cells = <0>;
            wait-ms = <10>;
            bindings
              = <&macro_tap &kp LC(A)>
              , <&kp COLON>
              ;
        };
        macro_tmux_next_pane: macro_tmux_next_pane {
            compatible = "zmk,behavior-macro";
            label = "Tmux Next Pane";
            #binding-cells = <0>;
            bindings
              = <&macro_tap &kp LC(A)>
              , <&kp O>
              ;
        };
        // There is no inverse for <Prefix o> in TMUX, so we do this instead :select-pane -t :.- followed by an ENTER
        macro_tmux_prev_pane: macro_tmux_prev_pane {
            compatible = "zmk,behavior-macro";
            label = "Tmux Previous Pane";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <0>;
            bindings
              = <&macro_tap &kp LC(A)>
              , <&kp COLON>
              , <&kp S &kp E &kp L &kp E &kp C &kp T &kp MINUS &kp P &kp A &kp N &kp E &kp SPACE &kp MINUS &kp T &kp SPACE &kp COLON &kp PERIOD &kp MINUS>
              , <&kp ENTER>
              ;
        };
        macro_chrome_next_tab: macro_chrome_next_tab {
            compatible = "zmk,behavior-macro";
            label = "MacOS Chrome Next Tab";
            #binding-cells = <0>;
            wait-ms = <10>;
            bindings = <&kp LC(TAB)>;
        };
        macro_chrome_prev_tab: macro_chrome_prev_tab {
            compatible = "zmk,behavior-macro";
            label = "MacOS Chrome Previous Tab";
            #binding-cells = <0>;
            wait-ms = <10>;
            bindings
              = <&macro_press &kp LSHIFT>
              , <&macro_tap &kp LC(TAB)>
              , <&macro_release &kp LSHIFT>
              ;
        };
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
        tap-ms = <30>;
    };
    encoder_tmux_window_nav: encoder_tmux_window_nav {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&macro_tmux_next_window>, <&macro_tmux_prev_window>;
    };
    encoder_tmux_pane_nav: encoder_tmux_pane_nav {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&macro_tmux_next_pane>, <&macro_tmux_prev_pane>;
    };
    encoder_chrome_tabs: encoder_chrome_tabs {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&macro_chrome_next_tab>, <&macro_chrome_prev_tab>;
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
XXX             XXX              XXX             XXX              XXX              XXX                &kp UP_ARROW             XXX              XXX              XXX            XXX           XXX           XXX
&kp GRAVE       &kp Q            &kp W           &kp E            &kp R            &kp T              &kp DOWN_ARROW           &kp Y            &kp U            &kp I          &kp O         &kp P         &kp BSPC
&tp RSHIFT ESC  &kp A            &hl LCTRL S     &hl LALT D       &hl LGUI F       &kp G              &kp LEFT_ARROW           &kp H            &hr RGUI J       &hr RALT K     &hr RCTRL L   &kp SEMI      &hl RSHIFT APOS
&kp LCTRL       &kp Z            &kp X           &kp C            &kp V            &kp B              &kp RIGHT_ARROW          &kp N            &kp M            &kp COMMA      &kp DOT       &kp SLASH     ___
&kp C_MUTE      XXX              XXX             ___              &lt 1 TAB        &kp SPACE          &kp ENTER                &kp ENTER        &lt 2 BSPC       ___            XXX          XXX
            >;

            sensor-bindings = <&encoder_tmux_window_nav>;
            display-name = "LAYER0";
        };

        layer1 {
            bindings = <
XXX             XXX              XXX             XXX              XXX              XXX                &macro_tmux_prev_pane     XXX              XXX              XXX            XXX           XXX           XXX
&kp GRAVE       &kp N1           &kp N2          &kp N3           &kp N4           &kp N5             &macro_tmux_next_pane     &kp N6           &kp N7           &kp N8         &kp N9        &kp N0        &kp CAPSLOCK
&tp RSHIFT ESC  ___              &kp LPAR        &kp MINUS        &kp PLUS         &kp RPAR           &macro_tmux_prev_window   &kp LT           &kp LBRC         &kp RBRC       &kp GT        &kp SEMI      &kp APOS
&kp LCTRL       ___              ___             ___              ___              ___                &macro_tmux_next_window   &kp KP_EQUAL     &kp LBKT         &kp RBKT       &kp UNDER     &kp BSLH      &kp PIPE
&kp C_MUTE      ___              ___             ___              &kp TAB          &kp SPACE          &kp ENTER                 &kp SPACE        &kp BSPC         &kp BSPC       XXX           XXX
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "SYM";
        };

        layer_2 {
            bindings = <
XXX             XXX              XXX             XXX              XXX              XXX                &kp UP_ARROW       XXX              XXX              XXX            XXX           XXX           XXX
&kp GRAVE       &kp EXCL         &kp AT          &kp HASH         &kp DOLLAR       &kp PERCENT        &kp DOWN_ARROW     &kp CARET        &kp AMPS         &kp STAR       ___           ___           ___
&tp RSHIFT ESC  ___              &mmv MOVE_LEFT  &mmv MOVE_UP     &mmv MOVE_RIGHT  &kp PG_UP          &kp LEFT_ARROW     &kp LEFT         &kp DOWN         &kp UP         &kp RIGHT     ___           ___
&kp LCTRL       ___              ___             &mmv MOVE_DOWN   ___              &kp PG_DN          &kp RIGHT_ARROW    ___              &mkp LCLK        &mkp MCLK      &mkp RCLK     ___           ___
&kp C_MUTE      ___              ___             ___              &kp TAB          &kp SPACE          XXX                &kp ENTER        &kp BSPC         ___            &trans        ___
            >;

            sensor-bindings = <&encoder_chrome_tabs>;
            display-name = "NAV";
        };

//        layer1 {
//            bindings = <
//&kp ESC         &kp F1           &kp F2          &kp F3           &kp F4           &kp F5             &mmv MOVE_UP       &kp F6           &kp F7           &kp F8         &kp F9        &kp F10       &trans
//&trans          &kp GRAVE        &mkp LCLK       &kp UP           &mkp RCLK        &mkp MB4           &mmv MOVE_DOWN     &kp PG_UP        &kp LBKT         &kp UP         &kp RBKT      &kp MINUS     &kp EQUAL
//&trans          &kp TILDE        &kp LEFT        &kp DOWN         &kp RIGHT        &mkp MB5           &mmv MOVE_LEFT     &kp PG_DN        &kp LBRC         &kp DOWN       &kp RBRC      &kp UNDER     &kp PLUS
//&trans          &rgb_ug RGB_OFF  &rgb_ug RGB_ON  &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &rgb_ug RGB_SPI    &mmv MOVE_RIGHT    &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &kp INSERT     &kp F11       &kp F12       &trans
//&kp C_MUTE      &trans           &trans          &trans           &trans           &trans             &mkp LCLK          &trans           &trans           &trans         &trans        &trans
//            >;


//            sensor-bindings = <&scroll_encoder>;
//            display-name = "LAYER1";
//        };


//        layer_2 {
//            bindings = <
//&kp TILDE       &bt BT_SEL 0     &bt BT_SEL 1    &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4       &mmv MOVE_UP       &kp F6           &kp F7           &kp F8           &kp F9        &kp F10     &trans
//&trans          &bt BT_CLR       &bt BT_CLR_ALL  &trans           &trans           &trans             &mmv MOVE_DOWN     &trans           &trans           &kp F11          &kp F12       &kp UNDER   &kp PLUS
//&trans          &out OUT_USB     &out OUT_BLE    &trans           &trans           &trans             &mmv MOVE_LEFT     &trans           &trans           &trans           &trans        &kp LBRC    &kp RBRC
//&trans          &sys_reset       &trans          &bootloader      &trans           &trans             &mmv MOVE_RIGHT    &trans           &trans           &sys_reset       &soft_off     &bootloader &trans
//&trans          &trans           &trans          &trans           &trans           &trans             &mkp LCLK          &trans           &trans           &trans           &trans        &trans
//            >;

//            sensor-bindings = <&scroll_encoder>;
//        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
